[
   ;;hospital
 {:db/ident :hospital/title
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

 {:db/ident :hospital/year
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/one
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

 {:db/ident :hospital/prescriber
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

 {:db/ident :hospital/affiliate
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

 {:db/ident :hospital/staff
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

 ;;the people!
 {:db/ident :person/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

 {:db/ident :person/born
  :db/valueType :db.type/instant
  :db/cardinality :db.cardinality/one
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

{:db/ident :person/death
  :db/valueType :db.type/instant
  :db/cardinality :db.cardinality/one
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

;;put a note on it
 {:db/ident :notes
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/many
  :db/id #db/id [:db.part/db]
  :db.install/_attribute :db.part/db}

  ;;prescription

  {:db/ident :prescription/patient
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one
    :db/id #db/id [:db.part/db]
    :db.install/_attribute :db.part/db}

  {:db/ident :prescription/prescriber
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one
    :db/id #db/id [:db.part/db]
    :db.install/_attribute :db.part/db}

  {:db/ident :prescription/medication
      :db/valueType :db.type/ref
      :db/cardinality :db.cardinality/one
      :db/id #db/id [:db.part/db]
      :db.install/_attribute :db.part/db}

  {:db/ident :prescription/quantity
        :db/valueType :db.type/long
        :db/cardinality :db.cardinality/one
        :db/id #db/id [:db.part/db]
        :db.install/_attribute :db.part/db}

  {:db/ident :prescription/expiration
          :db/valueType :db.type/instant
          :db/cardinality :db.cardinality/one
          :db/id #db/id [:db.part/db]
          :db.install/_attribute :db.part/db}

  {:db/ident :prescription/refills
            :db/valueType :db.type/long
            :db/cardinality :db.cardinality/one
            :db/id #db/id [:db.part/db]
            :db.install/_attribute :db.part/db}


 ;;;drug schema

 {:db/ident :drug/name
      :db/valueType :db.type/string
      :db/cardinality :db.cardinality/one
      :db/id #db/id [:db.part/db]
      :db.install/_attribute :db.part/db}


 {:db/ident :drug/color
      :db/valueType :db.type/ref
      :db/cardinality :db.cardinality/one
      :db/id #db/id [:db.part/db]
      :db.install/_attribute :db.part/db}


 {:db/ident :drug/interactions
      :db/valueType :db.type/ref
      :db/cardinality :db.cardinality/many
      :db/id #db/id [:db.part/db]
      :db.install/_attribute :db.part/db}


 {:db/id #db/id[:db.part/user -2000]
  :db/ident :drug.color/red}

 {:db/id #db/id[:db.part/user -2001]
  :db/ident :drug.color/orange}

 {:db/id #db/id[:db.part/user -2002]
  :db/ident :drug.color/yellow}

 {:db/id #db/id[:db.part/user -2003]
  :db/ident :drug.color/green}

 {:db/id #db/id[:db.part/user -2004]
  :db/ident :drug.color/blue}

 {:db/id #db/id[:db.part/user -2005]
  :db/ident :drug.color/purple}

;;person constructor function
 { :db/id #db/id [:db.part/user -2006]
  :db/ident :add-person
  :db/fn #db/fn {:lang "clojure"
                 :params [db id name birthday]
                 :code "(when-not (seq (d/q '[:find ?name ?birthday
                                      :in $ ?name ?birthday
                                      :where [?e :person/name ?name]
                                             [?e :person/born ?birthday]]
                                    db name birthday))
                  {:db/id id
                   :person/name name
                   :person/born birthday})"}}

;;prescription constructor
{:db/id #db/id [:db.part/user -2007]
 :db/ident :add-rx
 :db/fn #db/fn {:lang "clojure"
                :params [db id person-id prescriber-id med-id quantity
                         expiration refill-count]
                :code "(when (seq (d/q '[:find ?p-name ?dr-name
                                         :in $ ?person-id ?prescriber-id
                                :where [?person-id :person/name ?p-name]
                                       [?prescriber-id :person/name ?dr-name]]
                             db person-id prescriber-id))
                      {:db/id id
                       :prescription/patient person-id
                       :prescription/prescriber prescriber-id
                       :prescription/medication med-id
                       :prescription/quantity quantity
                       :prescription/expiration expiration
                       :prescription/refills refill-count})"}}


;;need to add the additional information about the transactions so wehn that we reigy transactions iwe will be able to query information
;;the main thing that needs to be captured is whether the fact was a correction or not.  we might also use this information to set up rules about who can issue correction transactions and who can create new users, etc.
#_{:db/id #db/id [:db.part/user -2008]
 :db/ident }

]
